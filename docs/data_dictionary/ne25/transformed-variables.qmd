---
title: "Transformed Variables"
subtitle: "Variables created through data processing pipeline"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)

# Load required libraries
library(dplyr)
library(DT)
library(knitr)

# Source the dictionary functions (now JSON-based)
source("assets/dictionary_functions.R")

# Initialize dictionary data from JSON
dict_data <- initialize_dictionary()

# Load data from JSON
transformed_vars_data <- get_transformed_variables_data(dict_data)
transformation_mappings <- get_transformation_mappings(dict_data)
```

# Transformed Variables

```{r freshness-warning, results='asis', echo=FALSE}
# Display freshness warning if data is stale
cat(display_freshness_warning(dict_data))
```

Transformed variables are created through the data processing pipeline, applying standardizations, calculations, and categorizations to raw variables. Each transformed variable includes information about its source variables and transformation process.

## Key Features

- **Source Variables**: Shows which raw variables were used to create each transformed variable
- **Transformation Category**: Groups variables by type of transformation (race/ethnicity, education, etc.)
- **Variable Lineage**: Clear mapping from raw inputs to transformed outputs
- **Missing Data**: Percentage of missing values for each variable
- **Data Types**: R data types for each variable

## Transformed Variables Table

This table shows all variables created through the data processing pipeline, organized by transformation category. Factor variables now include value-label mappings and ordering information.

```{r transformed-variables-table}
# Create and display the transformed variables table
format_transformed_variables_table(transformed_vars_data, transformation_mappings)
```

## Factor Variables Detail

Factor variables are categorical variables with defined levels and labels. This section provides enhanced documentation for all factor variables in the dataset.

```{r factor-variables-summary}
# Get factor variables summary statistics
factor_summary <- get_factor_variables_summary(transformed_vars_data)

knitr::kable(factor_summary,
             col.names = c("Statistic", "Count"),
             caption = "Factor Variables Summary")
```

### Factor Variables Table

This specialized view shows only factor variables with their complete value-label mappings, ordering information, and reference levels for statistical modeling.

```{r factor-variables-table}
# Create and display the factor variables table
format_factor_variables_table(transformed_vars_data)
```

### Factor Variable Legend

- **Type**: Semantic category (demographic_race, socioeconomic_education, etc.)
- **Ordered**: Whether factor levels have natural ordering
  - **↕️**: Ordered factor (e.g., education levels: less than HS < HS < college)
  - **•**: Unordered factor (e.g., race categories have no natural order)
- **Ref**: Reference level used for statistical modeling (typically most frequent level)
- **Value Labels**: Shows code-to-label mappings (e.g., 1=White, 2=Black, etc.)

## Transformation Categories

```{r transformation-categories}
# Get pre-computed category summary from JSON
summaries <- get_summary_data(dict_data)

if ("transformed_variable_categories" %in% names(summaries)) {
  category_summary <- summaries$transformed_variable_categories$data

  # Convert to data frame if needed
  if (is.list(category_summary)) {
    category_summary <- do.call(rbind, lapply(category_summary, data.frame))
  }

  knitr::kable(category_summary,
               col.names = c("Transformation Category", "Count", "Percentage (%)"),
               caption = "Variables by Transformation Category")
} else {
  # Fallback: calculate from loaded data
  category_summary <- transformed_vars_data %>%
    mutate(category_display = case_when(
      "category_mapped" %in% names(.) ~ category_mapped,
      TRUE ~ category
    )) %>%
    count(category_display, name = "n_variables") %>%
    arrange(desc(n_variables))

  knitr::kable(category_summary,
               col.names = c("Transformation Category", "Number of Variables"),
               caption = "Variables by Transformation Category (computed from JSON data)")
}
```

## Missing Data Summary

```{r missing-data-summary}
# Get pre-computed missing data summary from JSON
summaries <- get_summary_data(dict_data)

if ("missing_data_summary" %in% names(summaries)) {
  missing_summary <- summaries$missing_data_summary

  # Create a display table
  missing_table <- data.frame(
    "Metric" = c("Variables with no missing data",
                 "Variables with some missing data (1-49%)",
                 "Variables with high missing data (≥50%)",
                 "Average missing percentage",
                 "Median missing percentage"),
    "Value" = c(missing_summary$variables_with_no_missing,
                missing_summary$variables_with_some_missing,
                missing_summary$variables_with_high_missing,
                paste0(missing_summary$average_missing_percentage, "%"),
                paste0(missing_summary$median_missing_percentage, "%"))
  )

  knitr::kable(missing_table,
               caption = "Missing Data Summary Across Transformed Variables")
} else {
  cat("Missing data summary not available in JSON.")
}
```

```{r generation-info, echo=FALSE}
# Display generation information
if ("metadata" %in% names(dict_data)) {
  cat("\n**Data Dictionary Generated:** ", dict_data$metadata$generated, "\n")
  cat("**Total Transformed Variables:** ", dict_data$metadata$total_transformed_variables, "\n")
  if ("database_freshness" %in% names(summaries)) {
    cat("**Source Records:** ", summaries$database_freshness$total_records, "\n")
    if (!is.null(summaries$database_freshness$last_extraction)) {
      cat("**Last Data Extraction:** ", summaries$database_freshness$last_extraction, "\n")
    }
  }
}
```