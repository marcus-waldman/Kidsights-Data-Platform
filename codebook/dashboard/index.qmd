---
title: "Kidsights Codebook Explorer"
subtitle: "Interactive navigation of the codebook data"
format:
  html:
    page-layout: full
    resources:
      - "assets/json-viewer.js"
      - "assets/prism.min.js"
      - "assets/prism.min.css"
---

```{r setup}
#| include: false
library(tidyverse)
library(jsonlite)
library(DT)
library(htmltools)

# Source codebook functions
source("../../R/codebook/load_codebook.R")
source("../../R/codebook/query_codebook.R")

# Load codebook
codebook <- load_codebook("../data/codebook.json", validate = FALSE)
```

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/themes/default/style.min.css">

<style>
:root {
  /* Light mode colors */
  --bg-primary: #ffffff;
  --bg-secondary: #f8f9fa;
  --bg-tertiary: #e9ecef;
  --text-primary: #212529;
  --text-secondary: #495057;
  --text-muted: #6c757d;
  --border-color: #ddd;
  --card-shadow: rgba(0,0,0,0.1);
  --card-shadow-hover: rgba(0,0,0,0.15);
  --highlight-bg: #fff3cd;
  --breadcrumb-bg: #e9ecef;
  --response-bg: #f8f9fa;
  --response-border: #dee2e6;
}

[data-theme="dark"] {
  /* Dark mode colors */
  --bg-primary: #1a1a1a;
  --bg-secondary: #2d2d2d;
  --bg-tertiary: #3d3d3d;
  --text-primary: #ffffff;
  --text-secondary: #e0e0e0;
  --text-muted: #a0a0a0;
  --border-color: #404040;
  --card-shadow: rgba(0,0,0,0.3);
  --card-shadow-hover: rgba(0,0,0,0.4);
  --highlight-bg: #4a4a2a;
  --breadcrumb-bg: #3d3d3d;
  --response-bg: #2d2d2d;
  --response-border: #404040;
}

body {
  background-color: var(--bg-primary);
  color: var(--text-primary);
  transition: background-color 0.3s ease, color 0.3s ease;
}

.dark-mode-toggle {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1000;
  background: var(--bg-secondary);
  border: 1px solid var(--border-color);
  border-radius: 25px;
  padding: 8px 16px;
  cursor: pointer;
  font-size: 14px;
  color: var(--text-primary);
  transition: all 0.3s ease;
  box-shadow: 0 2px 8px var(--card-shadow);
}

.dark-mode-toggle:hover {
  background: var(--bg-tertiary);
  transform: translateY(-1px);
  box-shadow: 0 4px 12px var(--card-shadow-hover);
}

.json-explorer-container {
  display: flex;
  height: 70vh;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  overflow: hidden;
  margin: 20px 0;
  background: var(--bg-primary);
}

.tree-panel {
  width: 40%;
  background: var(--bg-secondary);
  border-right: 1px solid var(--border-color);
  overflow-y: auto;
  padding: 15px;
}

.json-panel {
  width: 60%;
  background: var(--bg-primary);
  padding: 15px;
  overflow-y: auto;
}

.json-view {
  display: none;
}

.json-view.active {
  display: block;
}

.view-toggle {
  margin-bottom: 15px;
}

.view-toggle .btn {
  margin-right: 10px;
}

.metadata-info {
  background: var(--bg-tertiary);
  padding: 15px;
  border-radius: 5px;
  margin-bottom: 20px;
  border: 1px solid var(--border-color);
}

.metadata-info h4 {
  margin-top: 0;
  color: var(--text-secondary);
}

.search-container {
  margin-bottom: 20px;
}

.search-container input {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  background: var(--bg-primary);
  color: var(--text-primary);
}

.search-container input::placeholder {
  color: var(--text-muted);
}

#tree-view {
  font-size: 14px;
}

.card-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 15px;
  max-height: 500px;
  overflow-y: auto;
}

.item-card {
  border: 1px solid var(--border-color);
  border-radius: 8px;
  padding: 15px;
  background: var(--bg-primary);
  box-shadow: 0 2px 4px var(--card-shadow);
  cursor: pointer;
  transition: all 0.2s;
}

.item-card:hover {
  box-shadow: 0 4px 8px var(--card-shadow-hover);
  transform: translateY(-2px);
}

.card-title {
  font-weight: bold;
  font-size: 16px;
  color: #007bff;
  margin-bottom: 8px;
}

.card-domain {
  font-size: 12px;
  color: var(--text-muted);
  margin-bottom: 8px;
}

.card-text {
  font-size: 14px;
  color: var(--text-secondary);
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
}

.highlight {
  background-color: var(--highlight-bg);
  padding: 2px 4px;
  border-radius: 3px;
}

pre code.hljs {
  font-size: 12px;
  max-height: 400px;
  overflow-y: auto;
}

.response-sets-info {
  background: var(--response-bg);
  border: 1px solid var(--response-border);
  border-radius: 8px;
  padding: 20px;
  margin: 20px 0;
}

.response-set {
  margin-bottom: 15px;
}

.response-set h5 {
  margin-bottom: 8px;
  color: var(--text-secondary);
}

.response-set h5 code {
  background: var(--bg-tertiary);
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 14px;
  color: var(--text-primary);
}

.response-options {
  font-size: 14px;
  color: var(--text-muted);
}

.response-option {
  margin-right: 5px;
}

.breadcrumb-nav {
  background: var(--breadcrumb-bg);
  padding: 8px 12px;
  border-radius: 4px;
  margin-bottom: 10px;
  font-size: 14px;
  color: var(--text-secondary);
  border: 1px solid var(--border-color);
}

.breadcrumb-nav .breadcrumb-item {
  display: inline;
}

.breadcrumb-nav .breadcrumb-item + .breadcrumb-item::before {
  content: " > ";
  color: var(--text-muted);
}

.jstree-node .jstree-icon {
  font-style: normal;
}

.jstree-node[data-type="object"] > .jstree-icon::before {
  content: "📁";
}

.jstree-node[data-type="array"] > .jstree-icon::before {
  content: "📋";
}

.jstree-node[data-type="primitive"] > .jstree-icon::before {
  content: "📄";
}

.jstree-node[data-section="metadata"] > .jstree-anchor {
  background-color: #e3f2fd;
}

[data-theme="dark"] .jstree-node[data-section="metadata"] > .jstree-anchor {
  background-color: #1a237e;
}

.jstree-node[data-section="items"] > .jstree-anchor {
  background-color: #f3e5f5;
}

[data-theme="dark"] .jstree-node[data-section="items"] > .jstree-anchor {
  background-color: #4a148c;
}

.jstree-node[data-section="response_sets"] > .jstree-anchor {
  background-color: #e8f5e8;
}

[data-theme="dark"] .jstree-node[data-section="response_sets"] > .jstree-anchor {
  background-color: #1b5e20;
}

.jstree-node[data-section="domains"] > .jstree-anchor {
  background-color: #fff3e0;
}

[data-theme="dark"] .jstree-node[data-section="domains"] > .jstree-anchor {
  background-color: #e65100;
}

.jstree-node[data-section="irt_models"] > .jstree-anchor {
  background-color: #fce4ec;
}

[data-theme="dark"] .jstree-node[data-section="irt_models"] > .jstree-anchor {
  background-color: #880e4f;
}

/* Dark mode adjustments for jsTree */
[data-theme="dark"] .jstree-default .jstree-anchor {
  color: var(--text-primary);
}

[data-theme="dark"] .jstree-default .jstree-hovered {
  background: var(--bg-tertiary);
  color: var(--text-primary);
}

[data-theme="dark"] .jstree-default .jstree-clicked {
  background: var(--bg-tertiary);
  color: var(--text-primary);
}
</style>

## Welcome to the Kidsights Codebook Explorer

<div class="dark-mode-toggle" onclick="toggleDarkMode()">
  🌙 Dark Mode
</div>

This interactive tool provides comprehensive access to the Kidsights item codebook, containing detailed information about assessment items across multiple studies and domains.

```{r metadata-display}
#| results: asis
#| echo: false

cat('<div class="metadata-info">')
cat('<h4>📊 Codebook Information</h4>')
cat('<div class="row">')
cat('<div class="col-md-3"><strong>Total Items:</strong>', codebook$metadata$total_items, '</div>')
cat('<div class="col-md-3"><strong>Version:</strong>', codebook$metadata$version, '</div>')
cat('<div class="col-md-6"><strong>Generated:</strong>', codebook$metadata$generated_date, '</div>')
cat('</div>')
cat('</div>')
```

### Search

```{r search-input}
#| results: asis
#| echo: false

cat('<div class="search-container">')
cat('<input type="text" id="search-input" placeholder="Search items by ID, text, domain, or study..." class="form-control">')
cat('</div>')
```

### Response Set Definitions

The codebook uses standardized response sets that are referenced by name. Here are the definitions:

```{r response-sets}
#| results: asis
#| echo: false

response_sets <- codebook$response_sets

cat('<div class="response-sets-info">')
for(set_name in names(response_sets)) {
  cat('<div class="response-set">')
  cat('<h5><code>', set_name, '</code></h5>')
  cat('<div class="response-options">')

  options <- response_sets[[set_name]]
  for(i in seq_along(options)) {
    option <- options[[i]]
    missing_indicator <- if(!is.null(option$missing) && option$missing) ' <em>(missing value)</em>' else ''
    cat('<span class="response-option">')
    cat('<strong>', option$value, '</strong> = ', option$label, missing_indicator)
    cat('</span>')
    if(i < length(options)) cat('; ')
  }

  cat('</div>')
  cat('</div>')
}
cat('</div>')
```

### Explorer Interface

```{r tree-navigator}
#| results: asis
#| echo: false

cat('<div class="view-toggle">')
cat('<button class="btn btn-primary active" data-view="tree">🌳 Tree View</button>')
cat('<button class="btn btn-outline-primary" data-view="cards">📋 Cards View</button>')
cat('<button class="btn btn-outline-primary" data-view="table">📊 Table View</button>')
cat('</div>')
```

```{r cards-view}
#| results: asis
#| echo: false

cat('<div id="cards-view" class="json-view">')
cat('<div class="card-container" id="cards-container">')
# Cards will be populated by JavaScript
cat('</div>')
cat('</div>')
```

```{r table-view-container}
#| results: asis
#| echo: false

cat('<div id="table-view" style="display: none;">')
```

```{r interactive-table}
# Create comprehensive data frame for table view
df <- items_to_dataframe(codebook, flatten_identifiers = TRUE)

# Add JSON preview column
df$json_preview <- sapply(names(codebook$items), function(item_id) {
  paste0('<button class="btn btn-sm btn-outline-primary view-json" data-item="',
         item_id, '">View JSON</button>')
})

datatable(
  df %>%
    select(
      `Item ID` = item_id,
      `Domain (Kidsights)` = domain_kidsights,
      `Domain (CAHMI)` = domain_cahmi,
      `Studies` = studies,
      `Text` = stem_combined,
      `JSON` = json_preview
    ),
  filter = 'top',
  escape = FALSE,
  options = list(
    pageLength = 15,
    scrollX = TRUE,
    searchHighlight = TRUE,
    dom = 'Bfrtip',
    buttons = list(
      'copy',
      list(extend = 'csv', filename = paste0('codebook_table_', Sys.Date())),
      'colvis'
    ),
    columnDefs = list(
      list(width = '100px', targets = 0),  # Item ID
      list(width = '80px', targets = 1),   # Domain (Kidsights)
      list(width = '80px', targets = 2),   # Domain (CAHMI)
      list(width = '120px', targets = 3),  # Studies
      list(width = '300px', targets = 4),  # Text
      list(width = '80px', targets = 5)    # JSON button
    )
  ),
  extensions = 'Buttons'
) %>%
  formatStyle(
    'Domain (Kidsights)',
    backgroundColor = styleEqual(
      c('motor', 'socemo', 'coglan'),
      c('#4ECDC4', '#FF6B6B', '#45B7D1')
    ),
    color = 'white',
    fontWeight = 'bold'
  ) %>%
  formatStyle(
    'Domain (CAHMI)',
    backgroundColor = styleEqual(
      c('motor', 'early_learning', 'self_regulation', 'social_emotional'),
      c('#4ECDC4', '#96CEB4', '#FECA57', '#FF9999')
    ),
    color = 'white',
    fontWeight = 'bold'
  )
```

```{r close-table-view}
#| results: asis
#| echo: false

cat('</div>')
```

```{r modal-html}
#| results: asis
#| echo: false

cat('<div class="json-explorer-container">')
cat('<div class="tree-panel">')
cat('<div id="tree-view" class="json-view active"></div>')
cat('</div>')
cat('<div class="json-panel">')
cat('<div id="breadcrumb-nav" class="breadcrumb-nav" style="display: none;">')
cat('<span class="breadcrumb-item">codebook</span>')
cat('</div>')
cat('<div id="json-content">')
cat('<p class="text-muted">Select an item from the tree to explore the JSON structure.</p>')
cat('</div>')
cat('</div>')
cat('</div>')

# Modal for full JSON view
cat('<div class="modal fade" id="jsonModal" tabindex="-1">')
cat('<div class="modal-dialog modal-xl">')
cat('<div class="modal-content">')
cat('<div class="modal-header">')
cat('<h5 class="modal-title">Item JSON Structure</h5>')
cat('<button type="button" class="btn-close" data-bs-dismiss="modal"></button>')
cat('</div>')
cat('<div class="modal-body">')
cat('<pre><code id="modal-json-content" class="language-json"></code></pre>')
cat('</div>')
cat('</div>')
cat('</div>')
cat('</div>')
```

```{r embed-codebook}
#| results: asis
#| echo: false

# Embed the codebook data as JSON for JavaScript to use
codebook_json <- toJSON(codebook, pretty = TRUE, auto_unbox = TRUE)
cat('<script type="application/json" id="codebook-data">')
cat(codebook_json)
cat('</script>')
```

<script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/jstree.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-json.min.js"></script>

<script>
// Load codebook data
const codebook = JSON.parse(document.getElementById('codebook-data').textContent);
let filteredItems = Object.keys(codebook.items);

// Initialize the interface
document.addEventListener('DOMContentLoaded', function() {
    initializeTreeView();
    initializeCardView();
    setupEventListeners();

    // Set initial view
    showView('tree');
});

function initializeTreeView() {
    const treeData = buildTreeData(codebook);

    $('#tree-view').jstree({
        'core': {
            'data': treeData,
            'check_callback': true
        },
        'plugins': ['search']
    });

    // Add custom attributes after tree is loaded
    $('#tree-view').on('ready.jstree', function() {
        addNodeAttributes();
    });

    // Re-add attributes after tree operations
    $('#tree-view').on('open_node.jstree close_node.jstree', function() {
        setTimeout(addNodeAttributes, 100);
    });

    $('#tree-view').on('select_node.jstree', function(e, data) {
        if (data.node.data) {
            // Use original data which should preserve our custom data
            const nodeData = data.node.original.data || data.node.data;
            showNodeDetails(nodeData);
        }
    });
}

function addNodeAttributes() {
    $('#tree-view .jstree-node').each(function() {
        const nodeId = $(this).attr('id');
        const node = $('#tree-view').jstree('get_node', nodeId);

        if (node.data) {
            // Add data attributes for CSS styling
            $(this).attr('data-type', node.data.type);
            if (node.data.section) {
                $(this).attr('data-section', node.data.section);
            }
        }
    });
}

function initializeCardView() {
    updateCardView();
}

function buildTreeData(codebook) {
    return buildTreeFromObject(codebook, 'codebook', []);
}

function buildTreeFromObject(obj, key, path) {
    const currentPath = [...path, key];
    const nodeId = currentPath.join('.');


    if (obj === null || obj === undefined) {
        return {
            id: nodeId,
            text: `${key}: null`,
            data: { path: currentPath, value: null, type: 'primitive' },
            type: 'primitive'
        };
    }

    if (typeof obj !== 'object') {
        // Primitive value
        const preview = String(obj).length > 50 ? String(obj).substring(0, 50) + '...' : String(obj);
        return {
            id: nodeId,
            text: `${key}: ${preview}`,
            data: { path: currentPath, value: obj, type: 'primitive' },
            type: 'primitive'
        };
    }

    if (Array.isArray(obj)) {
        // Array
        const children = obj.map((item, index) =>
            buildTreeFromObject(item, `[${index}]`, currentPath)
        );

        return {
            id: nodeId,
            text: `${key} [${obj.length} items]`,
            children: children,
            data: { path: currentPath, value: obj, type: 'array' },
            type: 'array',
            state: { opened: false }
        };
    }

    // Object
    const keys = Object.keys(obj);

    // Special handling for items to sort alphanumerically
    if (key === 'items') {
        keys.sort((a, b) => a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' }));
    }

    const children = keys.map(childKey =>
        buildTreeFromObject(obj[childKey], childKey, currentPath)
    );

    // Determine section for color coding
    let section = null;
    if (path.length === 0) { // Root level
        section = key;
    }

    return {
        id: nodeId,
        text: `${key} {${keys.length} ${keys.length === 1 ? 'property' : 'properties'}}`,
        children: children,
        data: { path: currentPath, value: obj, type: 'object', section: section },
        type: 'object',
        state: { opened: path.length < 2 } // Open first two levels by default
    };
}

function updateCardView() {
    const container = document.getElementById('cards-container');
    container.innerHTML = '';

    // Sort filtered items alphanumerically
    const sortedItems = filteredItems.sort((a, b) => {
        return a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' });
    });

    sortedItems.forEach(itemId => {
        const item = codebook.items[itemId];
        const domain = item.domains?.kidsights?.value || item.domains?.cahmi?.value || 'uncategorized';
        const studies = item.studies ? item.studies.join(', ') : 'None';
        const text = item.content?.stems?.combined || 'No text available';

        const card = document.createElement('div');
        card.className = 'item-card';
        card.onclick = () => showItemDetails(itemId);

        card.innerHTML = `
            <div class="card-title">${itemId}</div>
            <div class="card-domain">Domain: ${domain} | Studies: ${studies}</div>
            <div class="card-text">${text}</div>
        `;

        container.appendChild(card);
    });
}

function showNodeDetails(nodeData) {
    const { path, value, type } = nodeData;

    // Get the actual value by navigating the path in the codebook
    // This ensures we get the exact data at that path
    const actualValue = getValueAtPath(codebook, path);

    // Update breadcrumb
    updateBreadcrumb(path);

    // Show the JSON for this specific node
    const displayValue = actualValue !== undefined ? actualValue : value;
    const jsonString = JSON.stringify(displayValue, null, 2);

    const pathString = path.join(' > ');
    const nodeDescription = typeof displayValue === 'object' && displayValue !== null ?
                           (Array.isArray(displayValue) ? `${displayValue.length} items` : `${Object.keys(displayValue).length} properties`) :
                           'value';

    document.getElementById('json-content').innerHTML =
        `<h5>Showing: ${path[path.length - 1]} (${nodeDescription})</h5>
         <p class="text-muted">Path: ${pathString}</p>
         <pre><code class="language-json">${Prism.highlight(jsonString, Prism.languages.json, 'json')}</code></pre>`;
}

function getValueAtPath(obj, path) {
    // Navigate the path in the object, starting from index 1 to skip 'codebook'
    let current = obj;
    for (let i = 1; i < path.length; i++) {
        const segment = path[i];
        if (current && typeof current === 'object' && segment in current) {
            current = current[segment];
        } else {
            return undefined;
        }
    }
    return current;
}

function updateBreadcrumb(path) {
    const breadcrumbNav = document.getElementById('breadcrumb-nav');
    breadcrumbNav.style.display = 'block';

    breadcrumbNav.innerHTML = path.map(segment =>
        `<span class="breadcrumb-item">${segment}</span>`
    ).join('');
}

function setupEventListeners() {
    // View toggle
    document.querySelectorAll('[data-view]').forEach(btn => {
        btn.addEventListener('click', function() {
            const view = this.getAttribute('data-view');
            showView(view);

            // Update button states
            document.querySelectorAll('[data-view]').forEach(b => {
                b.className = 'btn btn-outline-primary';
            });
            this.className = 'btn btn-primary active';
        });
    });

    // Search functionality
    document.getElementById('search-input').addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        applySearch();
    });

    // JSON modal buttons
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('view-json')) {
            const itemId = e.target.getAttribute('data-item');
            showJsonModal(itemId);
        }
    });
}

function showView(viewName) {
    // Hide all views
    document.querySelectorAll('.json-view').forEach(view => {
        view.style.display = 'none';
        view.classList.remove('active');
    });

    // Show selected view
    const targetView = document.getElementById(viewName + '-view');
    if (targetView) {
        targetView.style.display = 'block';
        targetView.classList.add('active');
    }
}

function applySearch() {
    const searchTerm = document.getElementById('search-input').value.toLowerCase();

    if (searchTerm) {
        filteredItems = Object.keys(codebook.items).filter(itemId => {
            const item = codebook.items[itemId];

            const searchText = [
                itemId,
                item.content?.stems?.combined || '',
                item.domains?.kidsights?.value || '',
                item.domains?.cahmi?.value || '',
                item.studies ? item.studies.join(' ') : ''
            ].join(' ').toLowerCase();

            return searchText.includes(searchTerm);
        });
    } else {
        // No search term - show all items
        filteredItems = Object.keys(codebook.items);
    }

    // Update views
    updateCardView();

    // Update tree search
    $('#tree-view').jstree('search', searchTerm);

    // Re-add attributes after search
    setTimeout(addNodeAttributes, 200);
}

function showJsonModal(itemId) {
    const item = codebook.items[itemId];
    const jsonString = JSON.stringify(item, null, 2);

    document.getElementById('modal-json-content').innerHTML =
        Prism.highlight(jsonString, Prism.languages.json, 'json');

    const modal = new bootstrap.Modal(document.getElementById('jsonModal'));
    modal.show();
}

// Dark mode functionality
function toggleDarkMode() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

    document.documentElement.setAttribute('data-theme', newTheme);

    // Update toggle button text
    const toggleButton = document.querySelector('.dark-mode-toggle');
    toggleButton.innerHTML = newTheme === 'dark' ? '☀️ Light Mode' : '🌙 Dark Mode';

    // Store preference in localStorage
    localStorage.setItem('codebook-theme', newTheme);
}

// Initialize theme on page load
function initializeTheme() {
    const savedTheme = localStorage.getItem('codebook-theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const theme = savedTheme || (prefersDark ? 'dark' : 'light');

    document.documentElement.setAttribute('data-theme', theme);

    // Update toggle button text
    const toggleButton = document.querySelector('.dark-mode-toggle');
    if (toggleButton) {
        toggleButton.innerHTML = theme === 'dark' ? '☀️ Light Mode' : '🌙 Dark Mode';
    }
}

// Initialize theme as early as possible
initializeTheme();
</script>