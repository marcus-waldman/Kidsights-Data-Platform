"""
Insert Child ACEs Imputations into DuckDB

Reads Feather files generated by child ACEs imputation script (06_impute_child_aces.R)
and inserts imputed/derived values into DuckDB tables.

This script handles 9 child ACE variables:
- child_ace_parent_divorce: INTEGER 0/1 (Parent divorced/separated)
- child_ace_parent_death: INTEGER 0/1 (Parent died)
- child_ace_parent_jail: INTEGER 0/1 (Parent served time in jail)
- child_ace_domestic_violence: INTEGER 0/1 (Witnessed domestic violence)
- child_ace_neighborhood_violence: INTEGER 0/1 (Victim/witness neighborhood violence)
- child_ace_mental_illness: INTEGER 0/1 (Lived with mentally ill person)
- child_ace_substance_use: INTEGER 0/1 (Lived with substance abuser)
- child_ace_discrimination: INTEGER 0/1 (Treated unfairly due to race)
- child_ace_total: INTEGER 0-8 (derived - sum of 8 ACE items)

Usage:
    python scripts/imputation/ne25/06b_insert_child_aces.py
"""

import sys
from pathlib import Path
import pandas as pd

# Add project root to path
project_root = Path(__file__).resolve().parent.parent.parent.parent
sys.path.insert(0, str(project_root))

from python.db.connection import DatabaseManager
from python.imputation.config import get_study_config, get_table_prefix


def load_feather_files(feather_dir: Path, variable_name: str, n_imputations: int, required: bool = True):
    """
    Load Feather files for a single variable across all imputations

    Parameters
    ----------
    feather_dir : Path
        Directory containing Feather files
    variable_name : str
        Name of variable (e.g., "child_ace_parent_divorce", "child_ace_total")
    n_imputations : int
        Number of imputations to load (M)
    required : bool
        If True, raise error if files not found. If False, return empty dict.

    Returns
    -------
    dict
        Dictionary mapping imputation_m to DataFrame
    """
    # Pattern: {variable}_m{m}.feather (e.g., child_ace_parent_divorce_m1.feather)
    pattern = f"{variable_name}_m*.feather"
    feather_files = sorted(feather_dir.glob(pattern))

    if len(feather_files) == 0:
        if required:
            raise FileNotFoundError(
                f"No Feather files found for variable '{variable_name}' in {feather_dir}\n"
                f"Expected pattern: {pattern}\n"
                f"Run child ACEs imputation script first: scripts/imputation/ne25/06_impute_child_aces.R"
            )
        else:
            print(f"  [WARN] No Feather files found for {variable_name}")
            return {}

    imputations = {}

    for f in feather_files:
        # Extract m from filename (e.g., child_ace_parent_divorce_m1.feather -> 1)
        import re
        match = re.search(r'_m(\d+)$', f.stem)
        if not match:
            raise ValueError(f"Could not extract imputation number from filename: {f.name}")
        m = int(match.group(1))
        df = pd.read_feather(f)

        # Validate columns
        expected_cols = {'study_id', 'pid', 'record_id', 'imputation_m', variable_name}
        if not expected_cols.issubset(df.columns):
            raise ValueError(
                f"Missing columns in {f.name}. Expected: {expected_cols}, Got: {set(df.columns)}"
            )

        imputations[m] = df

    if len(imputations) != n_imputations:
        print(f"  [WARN] Expected {n_imputations} files, found {len(imputations)} for {variable_name}")

    return imputations


def create_child_ace_tables(db: DatabaseManager, study_id: str):
    """
    Create database tables for child ACEs imputations

    Following pattern: separate table per variable with naming:
    {study_id}_imputed_{variable_name}

    Parameters
    ----------
    db : DatabaseManager
        Database connection manager
    study_id : str
        Study identifier (e.g., "ne25")
    """
    print(f"\n[INFO] Creating child ACEs imputation tables...")

    table_prefix = get_table_prefix(study_id)

    with db.get_connection() as conn:
        # 8 Child ACE Items (binary 0/1, INTEGER storage)
        ace_items = [
            "child_ace_parent_divorce",
            "child_ace_parent_death",
            "child_ace_parent_jail",
            "child_ace_domestic_violence",
            "child_ace_neighborhood_violence",
            "child_ace_mental_illness",
            "child_ace_substance_use",
            "child_ace_discrimination"
        ]

        for item in ace_items:
            conn.execute(f"""
                DROP TABLE IF EXISTS {table_prefix}_{item}
            """)
            conn.execute(f"""
                CREATE TABLE {table_prefix}_{item} (
                    study_id VARCHAR NOT NULL,
                    pid INTEGER NOT NULL,
                    record_id INTEGER NOT NULL,
                    imputation_m INTEGER NOT NULL,
                    {item} INTEGER NOT NULL,
                    PRIMARY KEY (study_id, pid, record_id, imputation_m)
                )
            """)
            print(f"  [OK] Created table: {table_prefix}_{item}")

        # Child ACE Total (0-8 scale, INTEGER storage)
        conn.execute(f"""
            DROP TABLE IF EXISTS {table_prefix}_child_ace_total
        """)
        conn.execute(f"""
            CREATE TABLE {table_prefix}_child_ace_total (
                study_id VARCHAR NOT NULL,
                pid INTEGER NOT NULL,
                record_id INTEGER NOT NULL,
                imputation_m INTEGER NOT NULL,
                child_ace_total INTEGER NOT NULL,
                PRIMARY KEY (study_id, pid, record_id, imputation_m)
            )
        """)
        print(f"  [OK] Created table: {table_prefix}_child_ace_total")

        # Create indexes for query performance
        for item in ace_items + ["child_ace_total"]:
            conn.execute(f"""
                CREATE INDEX IF NOT EXISTS idx_{table_prefix}_{item}_pid_record
                ON {table_prefix}_{item} (pid, record_id)
            """)
            conn.execute(f"""
                CREATE INDEX IF NOT EXISTS idx_{table_prefix}_{item}_imputation
                ON {table_prefix}_{item} (imputation_m)
            """)

        print(f"  [OK] Created indexes on all tables")

    print(f"[OK] All 9 child ACE tables created successfully")


def insert_child_ace_imputations(db: DatabaseManager, study_id: str, feather_dir: Path, n_imputations: int):
    """
    Insert child ACE imputations from Feather files into database

    Parameters
    ----------
    db : DatabaseManager
        Database connection manager
    study_id : str
        Study identifier (e.g., "ne25")
    feather_dir : Path
        Directory containing Feather files
    n_imputations : int
        Number of imputations (M)
    """
    print(f"\n[INFO] Inserting child ACE imputations into database...")

    table_prefix = get_table_prefix(study_id)

    # Child ACE items
    ace_items = [
        "child_ace_parent_divorce",
        "child_ace_parent_death",
        "child_ace_parent_jail",
        "child_ace_domestic_violence",
        "child_ace_neighborhood_violence",
        "child_ace_mental_illness",
        "child_ace_substance_use",
        "child_ace_discrimination"
    ]

    # All variables to insert (8 items + 1 total)
    all_variables = ace_items + ["child_ace_total"]

    total_rows_inserted = 0

    for variable in all_variables:
        print(f"\n[INFO] Processing {variable}...")

        # Load Feather files for this variable
        imputations = load_feather_files(feather_dir, variable, n_imputations, required=True)

        variable_rows = 0

        # Insert each imputation
        for m, df in sorted(imputations.items()):
            with db.get_connection() as conn:
                # Validate data types
                if variable == "child_ace_total":
                    # Total should be 0-8
                    if df[variable].min() < 0 or df[variable].max() > 8:
                        raise ValueError(
                            f"Invalid child_ace_total range in imputation {m}: "
                            f"min={df[variable].min()}, max={df[variable].max()} (expected 0-8)"
                        )
                else:
                    # Items should be binary 0/1
                    unique_vals = df[variable].unique()
                    if not set(unique_vals).issubset({0, 1}):
                        raise ValueError(
                            f"Invalid binary values in {variable} imputation {m}: {unique_vals} (expected 0 or 1)"
                        )

                # Insert into table
                table_name = f"{table_prefix}_{variable}"
                df.to_sql(table_name, conn, if_exists='append', index=False)

                variable_rows += len(df)
                print(f"  [OK] Inserted {len(df)} rows for imputation m={m}")

        total_rows_inserted += variable_rows
        print(f"  [OK] Total for {variable}: {variable_rows} rows")

    print(f"\n[OK] All child ACE imputations inserted: {total_rows_inserted} total rows across 9 tables")


def validate_child_ace_tables(db: DatabaseManager, study_id: str, n_imputations: int):
    """
    Validate child ACE imputation tables

    Parameters
    ----------
    db : DatabaseManager
        Database connection manager
    study_id : str
        Study identifier
    n_imputations : int
        Expected number of imputations (M)
    """
    print(f"\n[INFO] Validating child ACE imputation tables...")

    table_prefix = get_table_prefix(study_id)

    ace_items = [
        "child_ace_parent_divorce",
        "child_ace_parent_death",
        "child_ace_parent_jail",
        "child_ace_domestic_violence",
        "child_ace_neighborhood_violence",
        "child_ace_mental_illness",
        "child_ace_substance_use",
        "child_ace_discrimination"
    ]

    all_variables = ace_items + ["child_ace_total"]

    with db.get_connection(read_only=True) as conn:
        for variable in all_variables:
            table_name = f"{table_prefix}_{variable}"

            # Check row count
            result = conn.execute(f"SELECT COUNT(*) as count FROM {table_name}").fetchone()
            total_rows = result[0]

            # Check rows per imputation
            result = conn.execute(f"""
                SELECT imputation_m, COUNT(*) as count
                FROM {table_name}
                GROUP BY imputation_m
                ORDER BY imputation_m
            """).fetchall()

            rows_per_m = {row[0]: row[1] for row in result}

            # Check for NULL values
            result = conn.execute(f"SELECT COUNT(*) FROM {table_name} WHERE {variable} IS NULL").fetchone()
            null_count = result[0]

            if null_count > 0:
                print(f"  [WARN] {variable}: {null_count} NULL values found")
            else:
                print(f"  [OK] {variable}: {total_rows} rows, no NULLs")

            # Check value ranges
            if variable == "child_ace_total":
                result = conn.execute(f"SELECT MIN({variable}), MAX({variable}) FROM {table_name}").fetchone()
                min_val, max_val = result[0], result[1]
                if min_val < 0 or max_val > 8:
                    print(f"  [WARN] {variable}: Invalid range ({min_val}-{max_val}), expected 0-8")
                else:
                    print(f"  [OK] {variable}: Valid range ({min_val}-{max_val})")
            else:
                result = conn.execute(f"SELECT DISTINCT {variable} FROM {table_name} ORDER BY {variable}").fetchall()
                unique_vals = [row[0] for row in result]
                if set(unique_vals) != {0, 1}:
                    print(f"  [WARN] {variable}: Non-binary values: {unique_vals}")
                else:
                    print(f"  [OK] {variable}: Binary values (0, 1)")

        # Summary statistics
        print(f"\n[INFO] Summary Statistics:")

        # Total rows across all tables
        result = conn.execute(f"""
            SELECT SUM(count) as total FROM (
                SELECT COUNT(*) as count FROM {table_prefix}_child_ace_parent_divorce
                UNION ALL SELECT COUNT(*) FROM {table_prefix}_child_ace_parent_death
                UNION ALL SELECT COUNT(*) FROM {table_prefix}_child_ace_parent_jail
                UNION ALL SELECT COUNT(*) FROM {table_prefix}_child_ace_domestic_violence
                UNION ALL SELECT COUNT(*) FROM {table_prefix}_child_ace_neighborhood_violence
                UNION ALL SELECT COUNT(*) FROM {table_prefix}_child_ace_mental_illness
                UNION ALL SELECT COUNT(*) FROM {table_prefix}_child_ace_substance_use
                UNION ALL SELECT COUNT(*) FROM {table_prefix}_child_ace_discrimination
                UNION ALL SELECT COUNT(*) FROM {table_prefix}_child_ace_total
            )
        """).fetchone()
        total_rows = result[0]

        print(f"  Total rows across all 9 tables: {total_rows}")
        print(f"  Expected imputations: {n_imputations}")

        # Check 4+ ACEs prevalence
        result = conn.execute(f"""
            SELECT
                AVG(CASE WHEN child_ace_total >= 4 THEN 1.0 ELSE 0.0 END) * 100 as pct_4plus
            FROM (
                SELECT pid, record_id, child_ace_total
                FROM {table_prefix}_child_ace_total
                WHERE imputation_m = 1
            )
        """).fetchone()
        pct_4plus = result[0]

        print(f"  4+ ACEs prevalence (m=1): {pct_4plus:.1f}%")

    print(f"\n[OK] Validation complete")


def main():
    """Main execution function"""
    print("=" * 60)
    print("Child ACEs Imputation Database Insertion")
    print("=" * 60)

    # Configuration
    study_id = "ne25"
    study_config = get_study_config(study_id)
    n_imputations = 5

    # Feather directory
    feather_dir = Path(study_config['data_dir']) / "child_aces_feather"

    print(f"\nConfiguration:")
    print(f"  Study ID: {study_id}")
    print(f"  Feather directory: {feather_dir}")
    print(f"  Number of imputations: {n_imputations}")

    if not feather_dir.exists():
        raise FileNotFoundError(
            f"Feather directory not found: {feather_dir}\n"
            f"Run child ACEs imputation script first: scripts/imputation/ne25/06_impute_child_aces.R"
        )

    # Initialize database connection
    db = DatabaseManager()

    try:
        # Step 1: Create tables
        create_child_ace_tables(db, study_id)

        # Step 2: Insert imputations
        insert_child_ace_imputations(db, study_id, feather_dir, n_imputations)

        # Step 3: Validate tables
        validate_child_ace_tables(db, study_id, n_imputations)

        print("\n" + "=" * 60)
        print("Child ACEs Imputation Database Insertion Complete!")
        print("=" * 60)

        print("\nNext steps:")
        print("  1. Query child ACEs via helper functions:")
        print("     from python.imputation.helpers import get_child_aces_imputations")
        print("     aces = get_child_aces_imputations(study_id='ne25', imputation_number=1)")
        print("  2. Update pipeline orchestrator to include Stage 10-11")
        print("  3. Update documentation with 11-stage/30-variable pipeline")

    except Exception as e:
        print(f"\n[ERROR] Database insertion failed: {e}")
        raise


if __name__ == "__main__":
    main()
